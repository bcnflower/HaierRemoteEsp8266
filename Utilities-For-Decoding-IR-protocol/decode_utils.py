
def decode_pronto(p,lowerLim,upperLim,introTicks = 3):
    midValue = (lowerLim+upperLim)/2
    # print("midValue=",midValue)
    p = p.split(" ")
    # print("No of Samples=",len(p))
    p = [int(x) for x in p]
    # print(p)
    out = ""
    for s in p[4:-1]:
        # print(s)
        if s < 0:
            # print(s)
            if -1*s < midValue:
                out+='0'
            elif -1*s > midValue:
                out+='1'
    return out

def seperateBits(binTxt,array):
    index = 0
    for arr in array:
        index+= arr
        # print(index)
        binTxt = binTxt[:index] + ' ' + binTxt[index:]
        index+=1
    return binTxt


def serial_ports():
    """ Lists serial port names

        :raises EnvironmentError:
            On unsupported or unknown platforms
        :returns:
            A list of the serial ports available on the system
    """
    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this excludes your current terminal "/dev/tty"
        ports = glob.glob('/dev/tty[A-Za-z]*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')
    else:
        raise EnvironmentError('Unsupported platform')

    result = []
    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass
    return result


def calcChecksum(binTxt,length,start=0):
    checksum = 0
    for i in range(start,start+length):
        # print(str(i).zfill(2),'=',binTxt[i:(i+1)*8])
        checksum+= int(binTxt[i:(i+1)*8],2)
    return str(bin(checksum))#[:10]





# binTxt = "1010011011100010000000000000000001000000001000000000000001000000000000000000000000000000000000000000011000101110101101010000000000000000000000000000000010110101"
binTxt = "101001101110110001100000000000100100000000100000000000001000000011010100101101010000000010110101"

# chk = calcChecksum(binTxt,16)
# print(chk,chk in binTxt)

# # p = "+3043,-3043,+3043,-4420,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-548,+548,-1691,+548,-1691,+548,-548,+548,-1691,+548,-1691,+548,-548,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-1691,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-1691,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-1691,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-1691,+548,-548,+548,-1691,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-1691,+548,-548,+548,-1691,+548,-548,+548,-1691,+548,-50000"
# p = "+3000 -3050 +3050 -4450 +500 -1700 +550 -600 +500 -1700 +550 -550 +550 -550 +550 -1700 +550 -1700 +500 -600 +500 -1750 +500 -1700 +550 -550 +550 -1700 +500 -600 +500 -600 +500 -600 +500 -600 +500 -1750 +500 -1700 +550 -1700 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +550 -550 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -1700 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +550 -550 +500 -1700 +550 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +550 -550 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +550 -550 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -1700 +500 -600 +500 -1750 +500 -1750 +500 -1700 +550 -1700 +550 -1700 +500 -1700 +550 -600 +500 -1700 +550 -1700 +550 -1700 +500 -600 +500 -1750 +500 -1700 +550 -550 +550 -1700 +500 -600 +500 -1750 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +550 -550 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -600 +500 -550 +550 -550 +550 -550 +550 -550 +550 -1700 +500 -600 +500 -1750 +500 -1700 +550 -550 +550 -1700 +500 -600 +500 -1750 +500 -50100"


# decoded = decode_pronto(p,550,1700)
# decoded = seperateBits(decoded,[8,8])
# print(decoded)

# p = p.split(",")
# print("No of Samples=",len(p))
# p = [int(x) for x in p]
# # print(p)
# for s in p[3:]:
#     # print(s)
#     if s == -548:
#         print(0,end="")
#     elif s == -1691:
#         print(1,end="")